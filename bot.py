import os
import json
import logging

# THIRD PARTIES
from dotenv import load_dotenv
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext.filters import Filters

# OWN
from models import UserFiles
from utils import get_file_info, remove_extension, extract_file, zipdir
from actions import (
    transform_bwtek,
    recalibrate_bwtek,
    dep,
    process_agnp_synthesis_experiments,
)

ACTIONS_MAPPING = {
    "trans": transform_bwtek,
    "recal": recalibrate_bwtek,
    "dep": dep,
    "agnp": process_agnp_synthesis_experiments,
}

# Set globals
BASEDIR = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(BASEDIR, ".env"))
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

# Set logger
logger = logging.getLogger("IBCP-BOT")
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler("ibcp-bot.log")
fh.setLevel(logging.WARNING)
formatter = logging.Formatter(
    "%(asctime)s : %(name)s : %(levelname)s : %(message)s"
)
fh.setFormatter(formatter)
logger.addHandler(fh)


# ===== COMMANDS =====
def start(bot, update):
    logger.debug("Got start command: %s" % update)
    chat_id = update.message.chat.id
    bot.send_chat_action(chat_id=chat_id, action=telegram.ChatAction.TYPING)
    message = [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n",
        "–Ø –±–æ—Ç –ò–ë–•–§ –†–ê–ù, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.",
        "–Ø –ø–æ–∫–∞ –µ—â–µ –º–æ–ª–æ–¥ –∏ –Ω–µ –≤—Å–µ–º—É —É—Å–ø–µ–ª –Ω–∞—É—á–∏—Ç—å—Å—è.",
        "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é:\n",
        " - –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ç—Ä—ã BWTek\n",
        " - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –î–≠–§ (—Å–ø—Ä–æ—Å–∏—Ç–µ –ù–∞—Ç–∞—à—É)\n",
        " - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –ø–æ —Å–∏–Ω—Ç–µ–∑—É —á–∞—Å—Ç–∏—Ü (—Å–ø—Ä–æ—Å–∏—Ç–µ –ö–æ–ª—é)\n",
        "\n–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ç—Ä—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞—Ä—Ö–∏–≤–µ *.zip –∏–ª–∏ *.rar",
        "–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª,",
        "—Ç–æ –º–æ–∂–Ω–æ –µ–≥–æ –Ω–µ –∞—Ä—Ö–∏—Ñ–∏—Ä–æ–≤–∞—Ç—å. –ê—Ä—Ö–∏–≤—ã *.zip –±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã.",
        "\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–æ–µ–º—É –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é:",
        "–ì—É–ª–∏–µ–≤ –†—É—Å—Ç–∞–º, glvrst@gmail.com, +79160013525",
        "\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
    ]
    bot.send_message(chat_id=chat_id, text=" ".join(message))
    return "OK"


def unknown(bot, update):
    logger.debug("Got unknown command: %s" % update)
    chat_id = update.message.chat.id
    bot.send_chat_action(chat_id=chat_id, action=telegram.ChatAction.TYPING)
    bot.send_message(
        chat_id=chat_id,
        text="–Ø —Ç–∞–∫–æ–≥–æ –µ—â–µ –Ω–µ —É–º–µ—é. –ù–∞–±–µ—Ä–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç–µ–∫—É—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
    )
    return "OK"


# ===== DOCUMENTS =====
def choose_document_action(bot, update):
    from app import app, db

    logger.debug("Got a message with document: %s" % update)
    chat_id = update.message.chat.id
    msg_id = update.message.message_id

    # Ignore the file if it is larger than 20Mb in size
    if update.message.document.file_size > 20 * 1024 * 1024:
        bot.send_message(
            chat_id=chat_id,
            text="–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. "
            "–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞ "
            "—Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 20–ú–± "
            "–Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–í–∞—à –Ω–∞ —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º < 20–ú–±üòä",
        )
        return "OK"

    userfile = UserFiles(
        user_id=update.message.from_user.id,
        chat_id=chat_id,
        message_id=msg_id,
        file_id=update.message.document.file_id,
        file_name=update.message.document.file_name,
    )
    logger.debug("Creating userfile...")
    with app.app_context():
        db.session.add(userfile)
        db.session.commit()
        logger.debug("Created a record for user file: %s" % userfile)
        keyboard = [
            [
                InlineKeyboardButton(
                    "–ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å BWTek –≤ txt (–¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞)",
                    callback_data='{"action":"trans", "uf":"%s"}'
                    % userfile.id,
                )
            ],
            [
                InlineKeyboardButton(
                    "–†–µ–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å BWTek",
                    callback_data='{"action":"recal", "uf":"%s"}'
                    % userfile.id,
                )
            ],
            [
                InlineKeyboardButton(
                    "–ü–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –î–≠–§",
                    callback_data='{"action":"dep", "uf":"%s"}' % userfile.id,
                )
            ],
            [
                InlineKeyboardButton(
                    "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–∏–Ω—Ç–µ–∑—É —á–∞—Å—Ç–∏—Ü",
                    callback_data='{"action":"agnp", "uf":"%s"}' % userfile.id,
                )
            ],
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    bot.send_message(
        chat_id=chat_id, text="–ß—Ç–æ –º–Ω–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup
    )

    return "OK"


# ===== INLINE BUTTONS =====
def inline_buttons_handler(bot, update):
    from app import app, db

    query = update.callback_query
    chat_id = query.message.chat_id

    logger.debug("Got an inline button action: %s" % query.data)
    bot.send_chat_action(chat_id=chat_id, action=telegram.ChatAction.TYPING)
    # Try to get params
    try:
        params = json.loads(query.data)
        action = params.get("action")
        userfile_id = int(params.get("uf"))
    except Exception as e:
        logger.error(e)
        bot.send_message(
            chat_id=chat_id,
            text="\n".join(
                [
                    "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò±",
                    "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ª:",
                    "Query data: %s" % query.data,
                    "Exception: %s" % e,
                ]
            ),
        )
        raise

    # Try to get info about file from db
    file_info = get_file_info(bot, userfile_id)
    if action in ACTIONS_MAPPING:
        outfile = os.path.join(
            app.config["PROCESSED_DIR"],
            "%s %s %s.zip"
            % (
                remove_extension(file_info["filename"]),
                file_info["userfile_id"],
                action,
            ),
        )
        bot.send_message(text="–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é...‚è≥", chat_id=chat_id)
        try:
            extract_file(bot, chat_id, file_info)
            statuses = ACTIONS_MAPPING[action](file_info["extract_path"])

            if any(statuses.values()):
                zipdir(file_info["extract_path"], outfile)
                bot.send_message(chat_id=chat_id, text="–ì–æ—Ç–æ–≤–æ!üöÄ")
                bot.send_document(
                    chat_id=chat_id,
                    document=open(outfile, "rb"),
                    filename=os.path.basename(outfile),
                    reply_to_message_id=file_info["message_id"],
                )
                if not all(statuses.values()):
                    message = "‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ‚ö†Ô∏è\n"
                    for file, status in statuses.items():
                        if not status:
                            file_path = os.path.relpath(
                                file, file_info["extract_path"]
                            )
                            # Telegram has limit for message length, so we
                            # split the message in case it is too long (> 4096)
                            if len(message) + len(file_path) + 10 < 4096:
                                message += f"\n ‚ùå {file_path}"
                            else:
                                bot.send_message(chat_id=chat_id, text=message)
                                message = f" ‚ùå {file_path}"
                    bot.send_message(chat_id=chat_id, text=message)
            else:
                bot.send_message(
                    chat_id=chat_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                )
        except Exception as e:
            logger.error(e)
            bot.send_message(
                chat_id=chat_id,
                text="\n".join(
                    [
                        "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò±",
                        "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–ª:",
                        "Query data: %s" % query.data,
                        "Exception: %s" % e,
                    ]
                ),
            )
            raise
    else:
        bot.send_message(
            chat_id=chat_id,
            text="–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üòû",
        )
    return "OK"


# ===== SET HANDLERS =====
bot = telegram.Bot(TOKEN)
updater = telegram.ext.Updater(bot=bot)
updater.dispatcher.add_handler(CommandHandler("help", start))
updater.dispatcher.add_handler(CommandHandler("start", start))
updater.dispatcher.add_handler(
    MessageHandler(Filters.document, callback=choose_document_action)
)
updater.dispatcher.add_handler(
    CallbackQueryHandler(callback=inline_buttons_handler)
)
updater.dispatcher.add_handler(MessageHandler(Filters.all, unknown))
dispatcher = updater.dispatcher
